docker swarm init --advertise-addr $(hostname -i) # initialize swarm mode it is listening on the ip address returned by the host
docker swarm join --token <token> # adds a host 
docker swarm join manager-token <token> # adds a manager - we should have atleast 3 mnaager nodes and several worker nodes 


docker node ls === you should see the number of nodes -- leader manages the manager nodes 
lets clone a voting app 
git clone https://github.com/docker/example-voting-app
cd example-voting-app 





LETS DEPLOY THE STACK 

docker stack deploy --compose-file=focker-stack.yml voting _stack

A stack is a group of services deployed together: components of an application that runs in separate instances. 

For the voting app, we might have, redis, db, vote,result, worker and visualizer servicess.



Each service can be made up of multiple containers calles tasks (replica >><. instances), and the tasks and services come together to form a stack.

A YAML file can define the entire stack; how they are linked together and handle updates on each service.

DOCKER STACK YAML USED TO DEPLOY THE VOTING APP AS A STACK

cat docker-stack.yml
# this file is meant for Docker Swarm stacks only
# trying it in compose will fail because of multiple replicas trying to bind to the same port
# Swarm currently does not support Compose Spec, so we'll pin to the older version 3.9

version: "3.9"
services: 

  redis:
    image: redis:alpine
    networks:
      -frontend
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volune:
     -db-data:/var/lib/postgresql/data
     networks:
       - backend
  
  vote:
    image: dockerssamples/examplevotingapp_vote
    ports:
      -5000:80
    networks:
      -frontend
    deploy:
      replicas: 2
      
  result:
    image: dockersamples/examplevotingapp_result
    ports:
      - 5001:80
    networks:
      - backend
  
  worker:
    image:dockersamples/examplevotingapp_worker
    networks:
      -frontend
      -backend
    deploy:
      replicas: 2
      
  networks:
    frontend:
    backend:
    
  volumes:
    db-data:
    
Example Voting App

A simple distributed application running across multiple Docker containers.

## Getting started

Download [Docker Desktop](https://www.docker.com/products/docker-desktop) for Mac or Windows. [Docker Compose](https://docs.docker.com/compose) will be automatically installed. On Linux, make sure you have the latest version of [Compose](https://docs.docker.com/compose/install/).

This solution uses Python, Node.js, .NET, with Redis for messaging and Postgres for storage.

Run in this directory to build and run the app:

```shell
docker compose up
```

The `vote` app will be running at [http://localhost:5000](http://localhost:5000), and the `results` will be at [http://localhost:5001](http://localhost:5001).

Alternately, if you want to run it on a [Docker Swarm](https://docs.docker.com/engine/swarm/), first make sure you have a swarm. If you don't, run:

```shell
docker swarm init
```

Once you have your swarm, in this directory run:

```shell
docker stack deploy --compose-file docker-stack.yml vote
```

## Run the app in Kubernetes

The folder k8s-specifications contains the YAML specifications of the Voting App's services.

Run the following command to create the deployments and services. Note it will create these resources in your current namespace (`default` if you haven't changed it.)

```shell
kubectl create -f k8s-specifications/
```

The `vote` web app is then available on port 31000 on each host of the cluster, the `result` web app is available on port 31001.

To remove them, run:

```shell
kubectl delete -f k8s-specifications/
```

## Architecture

![Architecture diagram](architecture.excalidraw.png)

* A front-end web app in [Python](/vote) which lets you vote between two options
* A [Redis](https://hub.docker.com/_/redis/) which collects new votes
* A [.NET](/worker/) worker which consumes votes and stores them inâ€¦
* A [Postgres](https://hub.docker.com/_/postgres/) database backed by a Docker volume
* A [Node.js](/result) web app which shows the results of the voting in real time

## Notes

The voting application only accepts one vote per client browser. It does not register additional votes if a vote has already been submitted from a client.
